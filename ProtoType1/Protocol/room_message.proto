syntax = "proto3";

package proto_def;


message RoomListReq {
    string category = 1;
    int32 page_number = 2;
    int32 num_per_page = 3;
}


message Room {
    enum LAYOUT {
        SEATS_4 = 0;
        SEATS_8 = 1;
    }
    string id = 1;
    string title = 2;
    string room_img = 6;
    int32  member_num = 4;
    string category = 7;

    string owner_name = 5;
    string owner_avatar = 8;
    string owner_id = 12;

    LAYOUT layout = 9;
    bool   need_password = 10;
    string extern_room_id = 11;
}

message RoomListResp {
    message BanBan {
        string id = 1;
        string icon = 2;
    }

    repeated Room rooms = 1;
    repeated BanBan top_banbans = 2;
}


message RoomDetailReq {
    string chatroom_id = 1;
    string uid = 2;
    string password = 3;
}


message RoomDetailResp {
    enum STATUS {
        OK = 0;
        PASSWORD_INVALID = 1;
        ROOM_IS_FULL = 2;
        USER_IS_BLOCKED = 3;
    };

    enum SEAT_STATE {
        DISABLED = 0;
        OPEN = 1;
        OCCUPIED = 2;
    };

    message Seat {
        int32 idx = 1;
        SEAT_STATE state = 2;
        string description = 3;

        string user_id = 4;
        string user_name = 5;
        string user_avatar = 6;
    };

    STATUS code = 1;
    Room room = 2;
    bool room_followed = 4;
    repeated Seat seats = 3;
}


message ConsumeRanksReq {
    enum RANK_TYPE {
        CHARM = 0;
        CONTRIB = 1;
        GUARDIAN = 2;
    }
    string uid = 1;
    string token = 2;
    string room_id = 3;
    RANK_TYPE rank_type =4;
}


message ConsumeRanksResp {

    enum RELATION_TYPE {
        UNKNOWN = 0;
        BRONZE = 1;
        SILVER = 2;
        GOLDEN = 3;
    }

    message Relation {
        RELATION_TYPE type = 1;
        int32 days_left = 2;
    }

    message RankItem {
        string uid = 1;
        string avatar = 2;
        string name = 3;
        string gender = 4;
        int32 age = 5;
        string level = 6;
        string vip = 7;
        int32  value = 8;

        repeated Relation relations = 9; // for guardian type
    }

    repeated RankItem rank_list = 1;
}


message RoomCreateReq {
    string uid = 1;
    string token = 2;
    string title = 3;
    int32  category_id = 4;
    string declaration = 5;
    string password = 6;
    int32  theme_id = 7;
}

message RoomCreateResp {
    enum STATUS {
        OK = 0;
        OVER_LIMIT = 1;
        TOKEN_INVALID = 2;
        CREATE_FAILED = 3;
    }

    STATUS status = 1;
    string room_id = 2;
}


message RoomSubscribeReq {
    string uid = 1;
    string token = 2;
    string room_id = 3;
    bool   followed = 4;
}

message RoomSubscribeResp {
    enum STATUS {
        OK = 0;
        TOKEN_INVALID = 1;
    }

    STATUS status = 1;
    bool followed = 2;
}

enum Role {
    OWNER = 0;
    OPERATOR = 1;
    BLOCKED = 2;
    GUEST = 3;
}

message RoomMembersReq {
    string uid = 1;
    string token = 2;
    string room_id = 3;
    Role role = 4;
    int32 noble = 5;
    int32 vip = 6;
}

message RoomMembersResp {
    enum STATUS {
        OK = 0;
        USER_INVALID = 1;
        PERMISSION_DENIED = 2;
    }

    message Member {
        string uid = 1;
        string name = 2;
        string avatar = 3;
        string time = 4;
        int32  noble = 5;
        int32  vip = 6;
        Role role = 7;
        string comment = 8;
    }

    STATUS status = 1;
    repeated Member members = 2;
}

message RoomMemberControlReq {
    string uid = 1;
    string token = 2;

    string room_id = 3;
    string tgt_uid = 4;
    Role role = 5;
    bool valid = 6;

    string comment = 7;
}


message RoomMemberControlResp {
    enum STATUS {
        OK = 0;
        USER_INVALID = 1;
        PERMISSION_DENIED = 2;
        OPERATION_FAILED = 3;
    }

    STATUS status = 1;
}

// this message is for placehold, Should Not Be used for clinet
message RoomMemberControlNotification {
    string uid = 1;
    string name = 2;
    string avatar = 3;
    Role role = 4;
    string comment = 5;
}

// this message is for placehold, Should Not Be used for client
message RoomEventReq {
    enum EventType {
        ENTER = 0;      // MAY COMPLETE BY CLIENT
        LEAVE = 1;      // AUTOCOMPLETE WHEN CALL EXIT MESSAGE
        OPEN_BOX = 2;   // AUTOCOMPLETE WHEN CALL SHOP MESSAGE OPEN BOX
        SEND_GIFT = 3;  // AUTOCOMPLETE WHEN CALL SHOP MESSAGE SEND GIFT
    }

    EventType type = 1;
    string uid = 2;
    string token = 3;
    string room_id = 4;
}

message RoomEventResp {
    enum STATUS {
        OK = 0;
        ERROR = 1;
    }

    STATUS status = 1;
}


/*
   This Message should be serialize to str as data , and used as the value of data which in
   the json object called attach in netease custom-defined message. The JSON object should be
   defined as bellow:
   {
       "from": "server|peer",
       "data": "protobuf serailized str", // if from server, it is a jwt str, see https://jwt.io
       "type": "Event|RoomControl|SeatControl|MemberControl", // See NotificationType below
   }
*/

enum NotificationType {
    EVENT = 0;
    ROOM_CONTROL = 1;
    SEAT_CONTROL = 2;
    MEMBER_CONTROL = 3;
}

message RoomEventNotification {
    message User {
        string uid = 1;
        string name = 2;
        string avatar = 3;
        int32  noble = 4;
        int32  vip = 5;
    }

    message Gift { //for send gift
        string to_uid = 1;
        string to_name = 2;
        int32  gift_id = 3;
        int32  count = 4;
    }

    message BoxOpenMsg {
        string title = 1;
        string icon = 2;
    }

    RoomEventReq.EventType type = 1;
    User user = 2;
    repeated Gift gifts = 3;
    repeated BoxOpenMsg box_msgs= 4;
}

enum ControlState {
    UNK = 0;
    DISABLE = 1;
    ENABLE = 2;
}

message RoomControlReq {
    enum ControlType {
        UNK = 0;
        KICK = 1;
        INFO_UPDATE = 2;
    }

    message Info {
        string declaration = 1;     //may impliement through client-side message
        string background = 2;      //may impliement through client-side message
        string room_avatar = 3;
        string password = 4;
        ControlState muted_all = 5; //may impliement through client-side message
        ControlState enable = 6;
        string title = 7;
    }

    ControlType type = 1;
    string uid = 2;
    string token = 3;
    string room_id = 4;
    Info room_info = 5;

    string tgt_uid = 6;  //for kick user from room, may impliment through client-side message
}

message RoomControlResp {
    enum STATUS {
        OK = 0;
        TOKEN_INVALID = 1;
        PERMISSION_DENIED = 2;
        OPERATION_FAILED = 3;
    }

    STATUS status = 1;
}


//message RoomControlNotification {
//    RoomControlReq.ControlType type = 1;
//    string uid = 2;
//    RoomControlReq.Info info = 3;
//}

message SeatControlReq {
    enum ControlType {
        UNK = 0;

        APPLY = 1;
        CANCEL = 2;

        TAKEN = 3;
        RELEASE = 4;

        OPEN_MIC = 5;
        CLOSE_MIC = 6;

        LOCK = 7;  // can be used for kick off user from seat
        UNLOCK = 8;
    }

    ControlType type = 1;
    string uid = 2;
    string token = 3;
    string room_id = 4;
    string tgt_uid = 5;
    int32  seat_idx = 6;

}

message SeatControlResp {
    enum STATUS {
        OK = 0;
        ERROR = 1;
    }

    STATUS status = 1;
}


message YunxinAddressReq {
    string room_id = 1;
}

message YunxinAddressResp {
    repeated string addr_list = 1;
}


message RoomTitleTipResp {
    repeated string titles = 1;
}

message RoomThemeResp {
    message Theme{
        int32 tid = 1;
        string url = 2;
    }

    repeated Theme themes = 1;
}


message RoomExtInfo {
    string bg_theme_id = 1;
}


message SeatQueueItem {
    enum SeatState {
        UNK = 0;
        LOCKED = 1;
        OPEN = 2;
        OCCUPIED = 3;
    }

    int32 seat_idx = 1;
    SeatState seat_state = 2;
    ControlState mic_state = 3;

    string uid = 4;
    string user_name = 5;
    string user_avatar = 6;
    int32 user_noble = 7;
    int32 user_vip = 8;
}

message WaitQueue {
    message User {
        string uid = 1;
        string name = 2;
        string gender = 3;
        string avatar = 4;
        int32 noble = 5;
        int32 vip = 6;
        int32 seat_idx = 7;
        int32 timestamp = 8;
    }
    string placeholder = 1;
    map<string, User> wait_users = 2;
}


message KeepAliveRegister {
    string uid = 1;
    string room_id = 2;
    int32  seat_idx = 3;
}

