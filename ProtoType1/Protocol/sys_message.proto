syntax = "proto3";

package proto_def;


message SkillListReq {
    string skill_id = 1;  // empty for all
}

message SkillListResp {
    enum Category {
        VOICE = 0;
        GAME = 1;
    }

    message SkillGrade {
        string skill_id = 1;
        string grade_id = 2;
        string grade_title = 3;
    }

    message Skill {
        string id = 1;
        string title = 2;
        string icon_url = 3;
        Category category = 4;
        repeated SkillGrade grades = 5;
    }

    repeated Skill skills = 1;
}


message CareerListResp {
    message Career {
        string id = 1;
        string title = 2;
        string category = 3;
    }

    repeated Career careers = 1;
}


message MusicSearchReq {
    string title = 1;
}

message MusicSearchResp {
    message Music {
        string title = 1;
        string author = 2;
        string url = 3;
    }

    enum STATUS {
        OK = 0;
        SEARCH_UNAVAIABLE = 1;
    }
    repeated Music musics = 1;
}


message RoomCategoryListReq {
    string uid = 1;
    string token = 2;
}

message RoomCategoryListResp {
    message Category {
        int32 cate_id = 1;
        string title = 2;
        int32 seat_count = 3;
    }

    repeated Category categories = 1;
}

message ComplainReq {
    enum CTYPE  {
        USER = 0;
        ROOM = 1;
    }

    string uid = 1;
    string token = 2;
    CTYPE  ctype = 3;
    string target_id = 4;
    string violation_id = 5;
    string comment = 6;
}

message ComplainResp {
    enum STATUS {
        OK = 0;
        TOKEN_EXPIRES = 1;
    }
    STATUS status = 1;
}

message NobleListReq {

}

message NobleListResp {
    message Noble {
        int32 nid = 1;
        string title = 2;

    }
    repeated Noble nobles = 1;
}


message UserNobleStateReq {
    string uid = 1;
    string token = 2;
    int32 nid = 3;
}

message UserNobleStateResp {
    bool noble = 1;
    string expires = 2;
}


message ServerAddrReq {
    string version = 1;
    string platform = 2;
    string channel = 3;
    string uid = 4;
}

message ServerAddrResp {
    enum Server {
        UNK = 0;
        API = 1;
        HB =  2;
    }

    enum Status {
        OK = 0;
        AB_TEST_STAGE = 1;
        VERSION_NEED_UPDATE = 2;
    }

    Status status = 1;
    map<int32, string> servers = 2;
}

//user commited apply infomation
message ApplyInfo {
    string img = 1;
    string audio = 2;
    string description = 3;
    int32  lowest_price = 4;
    int32  skill_id = 5;
    int32  skill_grade = 6;
    string game_uid = 7;
}

// system tip
message ApplyTip {
    string description = 1;
    string requirement = 2;
    string example_img = 3;
}

//summit an application or cancel last application
message SkillApplyUpdateReq {
    enum Cmd {
        UNK  = 0;
        UPDATE = 1;
        CANCEL = 2;
    }

    Cmd cmd = 1;
    string uid = 2;
    string token = 3;
    int32  skill_id = 4;
    ApplyInfo info = 5;
}

message SkillApplyUpdateResp {
    enum Status {
        OK = 0;
        ERROR = 1;
    }

    Status status = 1;
}

// query current application state
message SkillApplyQueryReq {
    string uid = 1;
    string token = 2;
    int32  skill_id = 3;
}

message SkillApplyQueryResp {
    enum Status {
        OK = 0;
        ERROR = 1;
    }

    enum ApplyState {
        NOTAPPLY = 0;
        APPLYING = 1;
        APPLIED = 2;
        FAILED = 3;
        CANCELED = 4;
    }

    Status status = 1;
    ApplyState state = 2;
    ApplyTip tip = 3;     //for display tip info, such as requirement or example image
    ApplyInfo info = 4;  //for display user applied info only if state is APPLIED
}

message UserSkillCtrlReq {
    string user_skill_id = 1;
    bool enable = 2;
}

message UserSkillCtrlResp {
    enum Status {
        OK = 0;
        ERROR = 1;
    }

    Status status = 1;
}
